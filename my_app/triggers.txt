This running document will keep track of all triggers

my_app_transaction:
CREATE OR REPLACE FUNCTION increment_personal()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.amount > 0 THEN
        UPDATE my_app_personalgoal
        SET sum_transaction = sum_transaction + NEW.amount
        WHERE user_id = NEW.user_id
        AND is_spending = FALSE
        AND NEW.week BETWEEN start_date AND end_date
        AND (category_id = NEW.category_id OR category_id IS NULL);
    ELSE
        UPDATE my_app_personalgoal
        SET sum_transaction = sum_transaction - NEW.amount
        WHERE user_id = NEW.user_id
        AND is_spending = TRUE
        AND NEW.week BETWEEN start_date AND end_date
        AND (category_id = NEW.category_id OR category_id IS NULL);
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER increment_personal_trigger
AFTER INSERT ON my_app_transactions
FOR EACH ROW
EXECUTE FUNCTION increment_personal();






CREATE OR REPLACE FUNCTION decrement_personal()
RETURNS TRIGGER AS $$
BEGIN
    IF OLD.amount > 0 THEN
        UPDATE my_app_personalgoal
        SET sum_transaction = sum_transaction - OLD.amount
        WHERE user_id = OLD.user_id
        AND is_spending = FALSE
        AND OLD.week BETWEEN start_date AND end_date
        AND (category_id = OLD.category_id OR category_id IS NULL);
    ELSE
        UPDATE my_app_personalgoal
        SET sum_transaction = sum_transaction + OLD.amount
        WHERE user_id = OLD.user_id
        AND is_spending = TRUE
        AND OLD.week BETWEEN start_date AND end_date
        AND (category_id = OLD.category_id OR category_id IS NULL);
    END IF;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER decrement_personal_trigger
AFTER DELETE ON my_app_transactions
FOR EACH ROW
EXECUTE FUNCTION decrement_personal();







CREATE OR REPLACE FUNCTION update_personal()
RETURNS TRIGGER AS $$
BEGIN
    -- Subtract OLD amount from sum_transaction if OLD.amount > 0
    IF OLD.amount > 0 THEN
        UPDATE my_app_personalgoal
        SET sum_transaction = sum_transaction - OLD.amount
        WHERE user_id = OLD.user_id
        AND is_spending = FALSE
        AND OLD.week BETWEEN start_date AND end_date
        AND (category_id = OLD.category_id OR category_id IS NULL);
    ELSE
        UPDATE my_app_personalgoal
        SET sum_transaction = sum_transaction + OLD.amount
        WHERE user_id = OLD.user_id
        AND is_spending = TRUE
        AND OLD.week BETWEEN start_date AND end_date
        AND (category_id = OLD.category_id OR category_id IS NULL);
    END IF;
    
    -- Add NEW amount to sum_transaction if NEW.amount > 0
    IF NEW.amount > 0 THEN
        UPDATE my_app_personalgoal
        SET sum_transaction = sum_transaction + NEW.amount
        WHERE user_id = NEW.user_id
        AND is_spending = FALSE
        AND NEW.week BETWEEN start_date AND end_date
        AND (category_id = NEW.category_id OR category_id IS NULL);
    ELSE
        UPDATE my_app_personalgoal
        SET sum_transaction = sum_transaction - NEW.amount
        WHERE user_id = NEW.user_id
        AND is_spending = TRUE
        AND NEW.week BETWEEN start_date AND end_date
        AND (category_id = NEW.category_id OR category_id IS NULL);
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_personal_trigger
AFTER UPDATE ON my_app_transactions
FOR EACH ROW
EXECUTE FUNCTION update_personal();

CREATE OR REPLACE FUNCTION group_insert_trigger()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.group_goal_id IS NULL THEN
        -- Overall Goal
		
		DECLARE user_group INTEGER;
		SELECT group_id into user_group
		FROM my_app_userjoingroup
		WHERE user_id = NEW.user_id
        LIMIT 1;
			
        IF NEW.amount > 0 THEN
            -- Saving transaction
            UPDATE my_app_groupgoal
            SET sum_transaction = sum_transaction + NEW.amount
			WHERE user_group = group_id
            AND is_overall = TRUE
            AND is_spending = FALSE
            AND NEW.week BETWEEN start_date AND end_date;

        ELSE 
            -- Spending transaction
            UPDATE my_app_groupgoal
            SET sum_transaction = sum_transaction - NEW.amount
			WHERE user_group = group_id
            AND is_overall = TRUE
            AND is_spending = TRUE
            AND NEW.week BETWEEN start_date AND end_date;
        END IF;
    ELSE
        -- Specific Goal
        IF NEW.amount > 0 THEN
            -- Saving transaction
            UPDATE my_app_groupgoal
            SET sum_transaction = sum_transaction + NEW.amount
            WHERE group_id = NEW.group_goal_id
			AND is_overall = FALSE
            AND is_spending = FALSE
			AND NEW.week BETWEEN start_date AND end_date;
        ELSE
            -- Spending transaction
            UPDATE my_app_groupgoal
            SET sum_transaction = sum_transaction - NEW.amount
            WHERE group_id = NEW.group_goal_id
			AND is_overall = FALSE
            AND is_spending = TRUE
			AND NEW.week BETWEEN start_date AND end_date;
        END IF;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER group_insert_trigger
AFTER INSERT ON my_app_transactions
FOR EACH ROW
EXECUTE FUNCTION group_insert_trigger();
